{%- liquid
  assign typelist = null | array
-%}
/**
 * This file is automatically generated by the `@indirectus/sdk` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";

export type Nullable<T> = T | null;
export type Optional<T> = Nullable<T>;
export type UnknownType<T> = unknown;

export type UUID = string;
export type BigInt = number;

export namespace System {
{% for collection in registry.collections -%}
{% liquid
  unless collection.is_system
    continue
  endunless
  assign singular = collection.name | split: "_" | last | pascal_case | regex_replace: "s$", ""
  if singular == "Setting"
    assign singular = "Settings"
  endif
%}
  /**
   * The {{ collection.name.raw | split: "_" | last | space_case | lower_case }} collection.
   */
  export type {{ singular }} = Directus.Directus{{ singular }}<Schema>;
{% endfor %}
}

export namespace Extensions {
{% for collection in registry.collections -%}
{% liquid
  unless collection.is_system
    continue
  endunless

  assign name = collection.name | split: "_" | last | pascal_case | regex_replace: "s$", ""
  if name == "Setting"
    assign name = "Settings"
  endif
%}
  /**
   * The {{ collection.name | split: "_" | last | space_case | lower_case }} custom fields.
   */
  export interface {{ name }} {
{%- for field in collection.fields %}
{% liquid
  if field.is_system
    continue
  endif
  capture jsdoc
  render 'typescript/get-field-jsdoc', field: field, prefix: 2
  endcapture
  capture type
  render 'typescript/get-field-type', field: field
  endcapture
-%}
{% if type == 'never' -%}
  // {{ field.name }} exists but it's not a data field.
{%- else %}
  {{ jsdoc -}}
  {{ field.name }}: {{ type }};
{% endif %}
{%- endfor %}
  };
{% endfor %}
}

/**
 * User collections.
 */
export namespace Collections {
{% for collection in registry.collections -%}
{% liquid
  if collection.is_system
    continue
  endif
%}
  /**
   * The {{ collection.name.raw | space_case | lower_case }} collection.
   */
  export interface {{ collection.name.raw | pascal_case }} {
{%- for field in collection.fields %}
{% liquid
  capture jsdoc
  render 'typescript/get-field-jsdoc', field: field, prefix: 2
  endcapture
  capture type
  render 'typescript/get-field-type', field: field
  endcapture
-%}
{% if type == 'never' -%}
  // {{ field.name }} exists but it's not a data field.
{%- else %}
  {{ jsdoc -}}
  {{ field.name }}: {{ type }};
{% endif %}
{%- endfor %}
  }
{% endfor %}
}

/**
 * System collections.
 */
export interface Schema {

{% for collection in registry.collections -%}
{% liquid
  unless collection.is_system
    continue
  endunless

  assign name = collection.name | split: "_" | last | pascal_case | regex_replace: "s$", ""
  if name == "Setting"
    assign name = "Settings"
  endif

  assign suffix = ""
  unless collection.is_singleton
    assign suffix = "[]"
  endunless
%}
  /**
   * The extended {{ collection.name | split: "_" | last | space_case | lower_case }} collection.
   */
  "{{ collection.name }}": Extensions.{{ name }}{{ suffix }};
{% endfor %}

}

/**
 * User collections.
 */
export interface Schema {
{% for collection in registry.collections -%}
{% liquid
  if collection.is_system
    continue
  endif

  assign suffix = ""
  unless collection.is_singleton
    assign suffix = "[]"
  endunless
%}
  /**
   * The {{ collection.name.raw | space_case | lower_case }} collection.
   */
  "{{ collection.name.raw }}": Collections.{{ collection.name.raw | pascal_case }}{{ suffix }};
{% endfor %}

}
