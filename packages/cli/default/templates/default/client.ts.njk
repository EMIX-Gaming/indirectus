{%- import "macro:typescript/types" as ts -%}
{% block header %}
/**
 * This file is automatically generated by the `@indirectus/sdk` package.
 * Follow the package's instruction to update this file with the latest schema.
 */
{% endblock %}

{% block imports %}
import type * as Directus from "@directus/sdk";
import type { Query as Query$ } from "@directus/sdk";
import {
  readSingleton as readSingleton$,
  readItems as readItems$,
  readItem as readItem$
} from "@directus/sdk";
{% endblock %}

{% block types %}
export type Nullable<T> = T | null;
export type Optional<T> = Nullable<T>;
export type UnknownType<T> = T | unknown;
export type UUID = string;
export type BigInt = number;
{% endblock %}


/**
 * System collections.
 */

export namespace Collections {
  {% for collection in registry.collections -%}
  {% if collection.is_system %}
    {% filter comment -%}
    The {{ collection.name | to_collection_text }} custom fields.
    {% endfilter %}
    export interface {{ collection.name | to_collection_name }} extends Directus.{{ collection.name | to_collection_name }}<Schema> {
  {%- for field in collection.fields %}
  {% if not collection.is_system %}
    {%- set type = field | to_ts_type -%}
    {%- if type != 'never' %}
    {{ field.name | to_ts_identifier }}: {{ type }};
    {%- endif -%}
  {% endif %}
  {%- endfor %}
    };
  {% endif %}
  {% endfor %}
  }



/**
 * User collections.
 */
export namespace Collections {
{% for collection in registry.collections -%}
{% if not collection.is_system %}
  /**
   * The {{ collection.name | space_case | lower_case }} collection.
   */
  export interface {{ collection.name | pascal_case }} {
{%- for field in collection.fields %}
{%- set type = field | to_ts_type -%}
{%- if type != 'never' %}
  {{ field.name | to_ts_identifier }}: {{ type }};
{%- endif -%}
{%- endfor %}
  }
{% endif %}
{% endfor %}
}


/**
 * System collections.
 */
export interface Schema {

{% for collection in registry.collections -%}
  {% if collection.is_system %}
  {% set suffix = "" if collection.is_singleton else "[]" %}
  /**
   * The extended {{ collection.name | to_collection_text }} collection.
   */
  {{ collection.name | to_ts_identifier }}: Collections.{{ collection.name | to_collection_name }}{{ suffix }};
  {% endif %}
{% endfor %}

}


/**
 * User collections.
 */
export interface Schema {
{% for collection in registry.collections -%}
  {% if not collection.is_system %}
  {% set suffix = "" if collection.is_singleton else "[]" %}
  /**
   * The {{ collection.name | to_collection_text }} collection.
   */
  {{ collection.name | to_ts_identifier }}: Collections.{{ collection.name | pascal_case }}{{ suffix }};
  {% endif %}
{% endfor %}

}


/**
 * Helper functions
 */

{% for collection in registry.collections -%}
{% if not collection.is_system %}

{% if collection.is_singleton %}
/**
 * Reads the {{ collection.name | to_collection_text }} singleton.
 */
export function get{{ collection.name | to_collection_name }}<
  const Query extends Query$<Schema, Collections.{{ collection.name | to_collection_name }}>,
>(query?: Query) {
  return readSingleton$<Schema, {{ collection.name | to_collection_string }}, Query>("{{ collection.name }}", query);
}

{% else %}

/**
 * List {{ collection.name | to_collection_text }} items.
 */
export function list{{ collection.name | to_collection_name }}<
  const Query extends Query$<Schema, Collections.{{ collection.name | to_collection_name }}>,
>(query?: Query) {
  return readItems$<Schema, {{ collection.name | to_collection_string }}, Query>("{{ collection.name }}", query);
}

/**
 * Gets a single known {{ collection.name | to_collection_text }} item by id.
 */
export function read{{ collection.name | to_collection_name }}<
  const Query extends Query$<Schema, Collections.{{ collection.name | to_collection_name }}>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, {{ collection.name | to_collection_string }}, Query>("{{ collection.name }}", key, query);
}

{% endif %}


{% endif %}
{% endfor %}
