{%- import "macro:typescript/types" as ts -%}
{% block header %}
/**
 * This file is automatically generated by the `@indirectus/sdk` package.
 * Follow the package's instruction to update this file with the latest schema.
 */
{% endblock %}

{% block imports %}
import type * as Directus from "@directus/sdk";
import type { Query as Query$ } from "@directus/sdk";
import {
  readSingleton as readSingleton$,
  readItems as readItems$,
  readItem as readItem$
} from "@directus/sdk";
{% endblock %}

{% block types %}
export type Nullable<T> = T | null;
export type Optional<T> = Nullable<T>;
export type UnknownType<T> = unknown;
export type UUID = string;
export type BigInt = number;
{% endblock %}

{% block system_namespace %}
export namespace System {
{% for collection in registry.collections -%}
  {% if collection.is_system %}
  {% block system_collection %}
  {% filter comment -%}
  {% block system_collection_comment -%}
  {{- ts.collection_text(collection.name) -}}
  {%- endblock %}
  {%- endfilter %}
  {% block system_collection_declaration -%}
  export type {{ ts.collection_name(collection.name) }} = Directus.Directus{{ ts.collection_name(collection.name, true, true) }}<Schema>;
  {%- endblock %}
  {% endblock %}

  {% endif %}
{% endfor %}
}
{% endblock %}


export namespace Extensions {
  {% for collection in registry.collections -%}
  {% if collection.is_system %}
    {% filter comment -%}
    The {{ ts.collection_text(collection.name) }} custom fields.
    {% endfilter %}
    export interface {{ ts.collection_name(collection.name, true, true) }} {
  {%- for field in collection.fields %}
  {% if not collection.is_system %}

  {% if type == 'never' -%}
    // {{ field.name }} exists but it's not a data field.
  {%- else %}
    {{ jsdoc -}}
    {{ field.name }}: {{ type }};
  {% endif %}
  {% endif %}
  {%- endfor %}
    };
  {% endif %}
  {% endfor %}
  }



/**
 * User collections.
 */
export namespace Collections {
{% for collection in registry.collections -%}
{% if not collection.is_system %}
  /**
   * The {{ collection.name | space_case | lower_case }} collection.
   */
  export interface {{ collection.name | pascal_case }} {
{%- for field in collection.fields %}
{% set type = "any" %}
{% set jsdoc = "/* JSDOC */" %}

{% if type == 'never' -%}
  // {{ field.name }} exists but it's not a data field.
{%- else %}
  {{ jsdoc -}}
  {{ field.name }}: {{ type }};
{% endif %}
{%- endfor %}
  }
{% endif %}
{% endfor %}
}


/**
 * System collections.
 */
export interface Schema {

{% for collection in registry.collections -%}
  {% if collection.is_system %}
  {% set suffix = "" if collection.is_singleton else "[]" %}
  {% set name = collection.name | split("_") | last | pascal_case | regex_replace("s$", "") %}
  {% set name = name if name != "Setting" else "Settings" %}

  /**
   * The extended {{ collection.name | split("_") | last | space_case | lower_case }} collection.
   */
  "{{ collection.name }}": Extensions.{{ name }}{{ suffix }};
  {% endif %}
{% endfor %}

}


/**
 * User collections.
 */
export interface Schema {
{% for collection in registry.collections -%}
  {% if not collection.is_system %}
  {% set suffix = "" if collection.is_singleton else "[]" %}
  /**
   * The {{ collection.name.raw | space_case | lower_case }} collection.
   */
  "{{ collection.name.raw }}": Collections.{{ collection.name.raw | pascal_case }}{{ suffix }};
  {% endif %}
{% endfor %}

}


/**
 * Helper functions
 */

{% for collection in registry.collections -%}
{% if not collection.is_system %}

{% if collection.is_singleton %}
/**
 * Reads the {{ ts.collection_text(collection.name) }} singleton.
 */
export function get{{ ts.collection_name(collection.name) }}<
  const Query extends Query$<Schema, Collections.{{ ts.collection_name(collection.name) }}>,
>(query?: Query) {
  return readSingleton$<Schema, {{ ts.collection_string(collection.name) }}, Query>("{{ collection.name }}", query);
}

{% else %}

/**
 * List {{ ts.collection_text(collection.name) }} items.
 */
export function list{{ ts.collection_name(collection.name) }}<
  const Query extends Query$<Schema, Collections.{{ ts.collection_name(collection.name) }}>,
>(query?: Query) {
  return readItems$<Schema, {{ ts.collection_string(collection.name) }}, Query>("{{ collection.name }}", query);
}

/**
 * Gets a single known {{ ts.collection_text(collection.name) }} item by id.
 */
export function read{{ ts.collection_name(collection.name) }}<
  const Query extends Query$<Schema, Collections.{{ ts.collection_name(collection.name) }}>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, {{ ts.collection_string(collection.name) }}, Query>("{{ collection.name }}", key, query);
}

{% endif %}


{% endif %}
{% endfor %}
